trigger:
  branches:
    include:
      - devl
      - main
  paths:
    exclude:
      - app/deployment
      - app/databases

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dockerRegistryServiceConnection: 'AZACR'
  imageName: 'sampleapp-devl'

stages:
- stage: BuildService
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    steps:
    - task: UseDotNet@2
      displayName: Install .NET SDK
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: dotnet restore
      displayName: Restore Dependencies

    - script: dotnet build --configuration $(buildConfiguration)
      displayName: Build Solution

    - script: dotnet test --configuration $(buildConfiguration) --no-build --verbosity normal --collect:"Code Coverage"
      displayName: Run Unit Tests with Code Coverage
      
    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage Results
      inputs:
        codeCoverageTool: 'Cobertura'  # Set Cobertura as the code coverage tool
        summaryFileLocation: '**/TestResults/*.xml'  # Path to Cobertura XML report
        reportDirectory: '$(Build.ArtifactStagingDirectory)/CodeCoverageReports'  # Directory for the report

    - task: PublishPipelineArtifact@1
      displayName: Publish Build Artifacts
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/build'
        artifact: 'drop'

- stage: Docker
  displayName: Push the Docker Image
  dependsOn: BuildService
  jobs:
  - job: DockerBuildAndPush
    displayName: Build and Push Docker Image
    steps:
    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageName)
        command: buildAndPush
        Dockerfile: sampleapp/Dockerfile
        tags: |
          $(Build.BuildId)
          latest
